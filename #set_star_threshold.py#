# decide what cuts to make in the stellar sample
from imports import *
from compute_sensitivity import powerlawfunc
import rvs

def get_full_CTL():
    '''Get the stellar parameters of the full CTL. Will take ~60 seconds.'''
    fs = np.array(glob.glob('CTL62/*csv'))
    assert fs.size == 12
    Tmagsfull, Teffsfull, Rssfull, Mssfull = np.zeros(0), np.zeros(0), \
                                             np.zeros(0), np.zeros(0)
    for i in range(fs.size):
        print float(i)/fs.size
        Tmags,Teffs,Rss,Mss = np.loadtxt(fs[i], delimiter=',',
                                         usecols=(2,3,5,6)).T
        Tmagsfull = np.append(Tmagsfull, Tmags)
        Teffsfull = np.append(Teffsfull, Teffs)
        Rssfull = np.append(Rssfull, Rss)
        Mssfull = np.append(Mssfull, Mss)

    # get corresponding photometric uncertainty among M dwarfs
    g = (Teffsfull <= 4e3) & (Teffsfull >= 2500) & (np.isfinite(Tmagsfull)) & \
        (np.isfinite(Rssfull)) & (np.isfinite(Mssfull))
    Tmagsfull, Teffsfull, Rssfull, Mssfull = Tmagsfull[g], Teffsfull[g], \
                                             Rssfull[g], Mssfull[g]
    popt = np.array([1.77126381e-12, 8.07867123e+00])
    sigsfull = powerlawfunc(Tmagsfull, *popt)
    return Tmagsfull, Teffsfull, Rssfull, Mssfull, sigsfull


def get_Tmag_threshold(Tmags, Teffs, Rss, Mss, sigs):
    '''Determine the upper limit on the M dwarf Tmags to consider.
    Want a sufficicently large sample to do statistics but also what bright
    targets to faciliate the detection of Earth-size planets.''' 
    depthEarth = (rvs.Rearth2m(1) / rvs.Rsun2m(np.median(Rss)))**2
    g = depthEarth/sigs >= 2
    print 'Number of CTL stars where Earth is detectable with a single transit', g.sum()
    return Tmags[g].max()
